// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: k8stty.proto

package k8stty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngressClient is the client API for Ingress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngressClient interface {
	CreateIngress(ctx context.Context, in *CreateIngressReq, opts ...grpc.CallOption) (*CreateIngressResp, error)
	DeleteIngress(ctx context.Context, in *DeleteIngressReq, opts ...grpc.CallOption) (*DeleteIngressResp, error)
}

type ingressClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressClient(cc grpc.ClientConnInterface) IngressClient {
	return &ingressClient{cc}
}

func (c *ingressClient) CreateIngress(ctx context.Context, in *CreateIngressReq, opts ...grpc.CallOption) (*CreateIngressResp, error) {
	out := new(CreateIngressResp)
	err := c.cc.Invoke(ctx, "/k8stty.Ingress/CreateIngress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressClient) DeleteIngress(ctx context.Context, in *DeleteIngressReq, opts ...grpc.CallOption) (*DeleteIngressResp, error) {
	out := new(DeleteIngressResp)
	err := c.cc.Invoke(ctx, "/k8stty.Ingress/DeleteIngress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngressServer is the server API for Ingress service.
// All implementations must embed UnimplementedIngressServer
// for forward compatibility
type IngressServer interface {
	CreateIngress(context.Context, *CreateIngressReq) (*CreateIngressResp, error)
	DeleteIngress(context.Context, *DeleteIngressReq) (*DeleteIngressResp, error)
	mustEmbedUnimplementedIngressServer()
}

// UnimplementedIngressServer must be embedded to have forward compatible implementations.
type UnimplementedIngressServer struct {
}

func (UnimplementedIngressServer) CreateIngress(context.Context, *CreateIngressReq) (*CreateIngressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngress not implemented")
}
func (UnimplementedIngressServer) DeleteIngress(context.Context, *DeleteIngressReq) (*DeleteIngressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIngress not implemented")
}
func (UnimplementedIngressServer) mustEmbedUnimplementedIngressServer() {}

// UnsafeIngressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngressServer will
// result in compilation errors.
type UnsafeIngressServer interface {
	mustEmbedUnimplementedIngressServer()
}

func RegisterIngressServer(s grpc.ServiceRegistrar, srv IngressServer) {
	s.RegisterService(&Ingress_ServiceDesc, srv)
}

func _Ingress_CreateIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServer).CreateIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Ingress/CreateIngress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServer).CreateIngress(ctx, req.(*CreateIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingress_DeleteIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServer).DeleteIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Ingress/DeleteIngress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServer).DeleteIngress(ctx, req.(*DeleteIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ingress_ServiceDesc is the grpc.ServiceDesc for Ingress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ingress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k8stty.Ingress",
	HandlerType: (*IngressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIngress",
			Handler:    _Ingress_CreateIngress_Handler,
		},
		{
			MethodName: "DeleteIngress",
			Handler:    _Ingress_DeleteIngress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8stty.proto",
}

// NamespaceClient is the client API for Namespace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceClient interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceReq, opts ...grpc.CallOption) (*CreateNamespaceResp, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceReq, opts ...grpc.CallOption) (*DeleteNamespaceResp, error)
}

type namespaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceClient(cc grpc.ClientConnInterface) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceReq, opts ...grpc.CallOption) (*CreateNamespaceResp, error) {
	out := new(CreateNamespaceResp)
	err := c.cc.Invoke(ctx, "/k8stty.Namespace/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceReq, opts ...grpc.CallOption) (*DeleteNamespaceResp, error) {
	out := new(DeleteNamespaceResp)
	err := c.cc.Invoke(ctx, "/k8stty.Namespace/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServer is the server API for Namespace service.
// All implementations must embed UnimplementedNamespaceServer
// for forward compatibility
type NamespaceServer interface {
	CreateNamespace(context.Context, *CreateNamespaceReq) (*CreateNamespaceResp, error)
	DeleteNamespace(context.Context, *DeleteNamespaceReq) (*DeleteNamespaceResp, error)
	mustEmbedUnimplementedNamespaceServer()
}

// UnimplementedNamespaceServer must be embedded to have forward compatible implementations.
type UnimplementedNamespaceServer struct {
}

func (UnimplementedNamespaceServer) CreateNamespace(context.Context, *CreateNamespaceReq) (*CreateNamespaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedNamespaceServer) DeleteNamespace(context.Context, *DeleteNamespaceReq) (*DeleteNamespaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedNamespaceServer) mustEmbedUnimplementedNamespaceServer() {}

// UnsafeNamespaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServer will
// result in compilation errors.
type UnsafeNamespaceServer interface {
	mustEmbedUnimplementedNamespaceServer()
}

func RegisterNamespaceServer(s grpc.ServiceRegistrar, srv NamespaceServer) {
	s.RegisterService(&Namespace_ServiceDesc, srv)
}

func _Namespace_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Namespace/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).CreateNamespace(ctx, req.(*CreateNamespaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Namespace/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Namespace_ServiceDesc is the grpc.ServiceDesc for Namespace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Namespace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k8stty.Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _Namespace_CreateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Namespace_DeleteNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8stty.proto",
}

// NetworkpolicyClient is the client API for Networkpolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkpolicyClient interface {
	CreateNetworkpolicy(ctx context.Context, in *CreateNetworkpolicyReq, opts ...grpc.CallOption) (*CreateNetworkpolicyResp, error)
	DeleteNetworkpolicy(ctx context.Context, in *DeleteNetworkpolicyReq, opts ...grpc.CallOption) (*DeleteNetworkpolicyResp, error)
}

type networkpolicyClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkpolicyClient(cc grpc.ClientConnInterface) NetworkpolicyClient {
	return &networkpolicyClient{cc}
}

func (c *networkpolicyClient) CreateNetworkpolicy(ctx context.Context, in *CreateNetworkpolicyReq, opts ...grpc.CallOption) (*CreateNetworkpolicyResp, error) {
	out := new(CreateNetworkpolicyResp)
	err := c.cc.Invoke(ctx, "/k8stty.Networkpolicy/CreateNetworkpolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkpolicyClient) DeleteNetworkpolicy(ctx context.Context, in *DeleteNetworkpolicyReq, opts ...grpc.CallOption) (*DeleteNetworkpolicyResp, error) {
	out := new(DeleteNetworkpolicyResp)
	err := c.cc.Invoke(ctx, "/k8stty.Networkpolicy/DeleteNetworkpolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkpolicyServer is the server API for Networkpolicy service.
// All implementations must embed UnimplementedNetworkpolicyServer
// for forward compatibility
type NetworkpolicyServer interface {
	CreateNetworkpolicy(context.Context, *CreateNetworkpolicyReq) (*CreateNetworkpolicyResp, error)
	DeleteNetworkpolicy(context.Context, *DeleteNetworkpolicyReq) (*DeleteNetworkpolicyResp, error)
	mustEmbedUnimplementedNetworkpolicyServer()
}

// UnimplementedNetworkpolicyServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkpolicyServer struct {
}

func (UnimplementedNetworkpolicyServer) CreateNetworkpolicy(context.Context, *CreateNetworkpolicyReq) (*CreateNetworkpolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkpolicy not implemented")
}
func (UnimplementedNetworkpolicyServer) DeleteNetworkpolicy(context.Context, *DeleteNetworkpolicyReq) (*DeleteNetworkpolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkpolicy not implemented")
}
func (UnimplementedNetworkpolicyServer) mustEmbedUnimplementedNetworkpolicyServer() {}

// UnsafeNetworkpolicyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkpolicyServer will
// result in compilation errors.
type UnsafeNetworkpolicyServer interface {
	mustEmbedUnimplementedNetworkpolicyServer()
}

func RegisterNetworkpolicyServer(s grpc.ServiceRegistrar, srv NetworkpolicyServer) {
	s.RegisterService(&Networkpolicy_ServiceDesc, srv)
}

func _Networkpolicy_CreateNetworkpolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkpolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkpolicyServer).CreateNetworkpolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Networkpolicy/CreateNetworkpolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkpolicyServer).CreateNetworkpolicy(ctx, req.(*CreateNetworkpolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Networkpolicy_DeleteNetworkpolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkpolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkpolicyServer).DeleteNetworkpolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Networkpolicy/DeleteNetworkpolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkpolicyServer).DeleteNetworkpolicy(ctx, req.(*DeleteNetworkpolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Networkpolicy_ServiceDesc is the grpc.ServiceDesc for Networkpolicy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Networkpolicy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k8stty.Networkpolicy",
	HandlerType: (*NetworkpolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetworkpolicy",
			Handler:    _Networkpolicy_CreateNetworkpolicy_Handler,
		},
		{
			MethodName: "DeleteNetworkpolicy",
			Handler:    _Networkpolicy_DeleteNetworkpolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8stty.proto",
}

// PodClient is the client API for Pod service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodClient interface {
	CreatePod(ctx context.Context, in *CreatePodReq, opts ...grpc.CallOption) (*CreatePodResp, error)
	DeletePod(ctx context.Context, in *DeletePodReq, opts ...grpc.CallOption) (*DeletePodResp, error)
}

type podClient struct {
	cc grpc.ClientConnInterface
}

func NewPodClient(cc grpc.ClientConnInterface) PodClient {
	return &podClient{cc}
}

func (c *podClient) CreatePod(ctx context.Context, in *CreatePodReq, opts ...grpc.CallOption) (*CreatePodResp, error) {
	out := new(CreatePodResp)
	err := c.cc.Invoke(ctx, "/k8stty.Pod/CreatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) DeletePod(ctx context.Context, in *DeletePodReq, opts ...grpc.CallOption) (*DeletePodResp, error) {
	out := new(DeletePodResp)
	err := c.cc.Invoke(ctx, "/k8stty.Pod/DeletePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodServer is the server API for Pod service.
// All implementations must embed UnimplementedPodServer
// for forward compatibility
type PodServer interface {
	CreatePod(context.Context, *CreatePodReq) (*CreatePodResp, error)
	DeletePod(context.Context, *DeletePodReq) (*DeletePodResp, error)
	mustEmbedUnimplementedPodServer()
}

// UnimplementedPodServer must be embedded to have forward compatible implementations.
type UnimplementedPodServer struct {
}

func (UnimplementedPodServer) CreatePod(context.Context, *CreatePodReq) (*CreatePodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePod not implemented")
}
func (UnimplementedPodServer) DeletePod(context.Context, *DeletePodReq) (*DeletePodResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedPodServer) mustEmbedUnimplementedPodServer() {}

// UnsafePodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodServer will
// result in compilation errors.
type UnsafePodServer interface {
	mustEmbedUnimplementedPodServer()
}

func RegisterPodServer(s grpc.ServiceRegistrar, srv PodServer) {
	s.RegisterService(&Pod_ServiceDesc, srv)
}

func _Pod_CreatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).CreatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Pod/CreatePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).CreatePod(ctx, req.(*CreatePodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Pod/DeletePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).DeletePod(ctx, req.(*DeletePodReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pod_ServiceDesc is the grpc.ServiceDesc for Pod service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pod_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k8stty.Pod",
	HandlerType: (*PodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePod",
			Handler:    _Pod_CreatePod_Handler,
		},
		{
			MethodName: "DeletePod",
			Handler:    _Pod_DeletePod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8stty.proto",
}

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	CreateService(ctx context.Context, in *CreateServiceReq, opts ...grpc.CallOption) (*CreateServiceResp, error)
	DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*DeleteServiceResp, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateService(ctx context.Context, in *CreateServiceReq, opts ...grpc.CallOption) (*CreateServiceResp, error) {
	out := new(CreateServiceResp)
	err := c.cc.Invoke(ctx, "/k8stty.Service/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*DeleteServiceResp, error) {
	out := new(DeleteServiceResp)
	err := c.cc.Invoke(ctx, "/k8stty.Service/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	CreateService(context.Context, *CreateServiceReq) (*CreateServiceResp, error)
	DeleteService(context.Context, *DeleteServiceReq) (*DeleteServiceResp, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) CreateService(context.Context, *CreateServiceReq) (*CreateServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedServiceServer) DeleteService(context.Context, *DeleteServiceReq) (*DeleteServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Service/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateService(ctx, req.(*CreateServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.Service/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteService(ctx, req.(*DeleteServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k8stty.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _Service_CreateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Service_DeleteService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8stty.proto",
}

// CheckOriginClient is the client API for CheckOrigin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckOriginClient interface {
	Check(ctx context.Context, in *CheckOriginReq, opts ...grpc.CallOption) (*CheckOriginResp, error)
}

type checkOriginClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckOriginClient(cc grpc.ClientConnInterface) CheckOriginClient {
	return &checkOriginClient{cc}
}

func (c *checkOriginClient) Check(ctx context.Context, in *CheckOriginReq, opts ...grpc.CallOption) (*CheckOriginResp, error) {
	out := new(CheckOriginResp)
	err := c.cc.Invoke(ctx, "/k8stty.CheckOrigin/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckOriginServer is the server API for CheckOrigin service.
// All implementations must embed UnimplementedCheckOriginServer
// for forward compatibility
type CheckOriginServer interface {
	Check(context.Context, *CheckOriginReq) (*CheckOriginResp, error)
	mustEmbedUnimplementedCheckOriginServer()
}

// UnimplementedCheckOriginServer must be embedded to have forward compatible implementations.
type UnimplementedCheckOriginServer struct {
}

func (UnimplementedCheckOriginServer) Check(context.Context, *CheckOriginReq) (*CheckOriginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedCheckOriginServer) mustEmbedUnimplementedCheckOriginServer() {}

// UnsafeCheckOriginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckOriginServer will
// result in compilation errors.
type UnsafeCheckOriginServer interface {
	mustEmbedUnimplementedCheckOriginServer()
}

func RegisterCheckOriginServer(s grpc.ServiceRegistrar, srv CheckOriginServer) {
	s.RegisterService(&CheckOrigin_ServiceDesc, srv)
}

func _CheckOrigin_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOriginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckOriginServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8stty.CheckOrigin/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckOriginServer).Check(ctx, req.(*CheckOriginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckOrigin_ServiceDesc is the grpc.ServiceDesc for CheckOrigin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckOrigin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k8stty.CheckOrigin",
	HandlerType: (*CheckOriginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _CheckOrigin_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8stty.proto",
}
